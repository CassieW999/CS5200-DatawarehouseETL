library(XML)
library(DBI)
library(dplyr)
library(dbplyr)

dbfile <- "pubmed.db"
dbcon <- dbConnect(RSQLite::SQLite(), dbfile)

xmlFile <- "C:/Users/cecil/OneDrive/Document/Cecil Science/CSCI 5200/pubmed22n0001-sample.xml"
xmlDOM <- xmlParse(xmlFile)
r <- xmlRoot(xmlDOM)
numArticle = xmlSize(r)


sqlcmd = "DROP TABLE IF EXISTS AuthorLists"
dbExecute(dbcon, sqlcmd)

sqlcmd = "DROP TABLE IF EXISTS Authors"
dbExecute(dbcon, sqlcmd)

sqlcmd = "DROP TABLE IF EXISTS Articles"
dbExecute(dbcon, sqlcmd)

sqlcmd = "DROP TABLE IF EXISTS Journals"
dbExecute(dbcon, sqlcmd)

sqlcmd = "CREATE TABLE Authors(
AID INTEGER NOT NULL PRIMARY KEY,
lastName TEXT,
foreName TEXT,
initials TEXT
)"
dbExecute(dbcon, sqlcmd)

sqlcmd = "CREATE TABLE Journals(
ISSN INTEGER PRIMARY KEY,
volume INTEGER,
issue INTEGER,
journalTitle TEXT,
pubDate Date
)"
dbExecute(dbcon, sqlcmd)

sqlcmd = "CREATE TABLE Articles(
PMID INTEGER NOT NULL PRIMARY KEY,
journalID INTEGER NOT NULL,
language TEXT,
articleTitle TEXT,

FOREIGN KEY (journalID) REFERENCES Journals(ISSN)
)"
dbExecute(dbcon, sqlcmd)

sqlcmd = "CREATE TABLE AuthorLists(
articleID INTEGER,
authorID INTEGER,
PRIMARY KEY(articleID,authorID),
FOREIGN KEY(articleID) REFERENCES Articles(PMID),
FOREIGN KEY(authorID) REFERENCES Authors(aid)
)"

dbExecute(dbcon, sqlcmd)

Article <- data.frame(PMID = integer(),
                      journalID = integer(),
                      language = character(),
                      articleTitle = character(),
                      stringsAsFactors = F
)

Journal <- data.frame(ISSN = integer(),
                      volume = character(),
                      issue = character(),
                      journalTitle = character(),
                      pubDate = character(),
                      stringsAsFactors = F
)

Author <- data.frame(AID = integer(),
                     lastName = character(),
                     foreName = character(),
                     initials = character(),
                     stringsAsFactors = F
)

AuthorList <- data.frame(articleID = integer(),
                         authorID = integer(),
                         stringsAsFactors = F
)

ISSN <- xpathSApply(xmlDOM, "//ISSN", xmlValue)
volume <- xpathSApply(xmlDOM, "//Volume", xmlValue)
issue <- xpathSApply(xmlDOM, "//Issue", xmlValue)
journalTitle <- xpathSApply(xmlDOM, "//Title", xmlValue)
pubDate <- xpathSApply(xmlDOM, "//PubDate", xmlValue)

for(i in 1 : numArticle)
{
  Journal[i, 1] <- ISSN[i]
  Journal[i, 2] <- volume[i]
  Journal[i, 3] <- issue[i]
  Journal[i, 4] <- journalTitle[i]
  Journal[i, 5] <- pubDate[i]
}

journalID <- xpathSApply(xmlDOM, "//Journal/ISSN", xmlValue)
language <- xpathSApply(xmlDOM, "//Language", xmlValue)
articleTitle <- xpathSApply(xmlDOM,"//ArticleTitle",xmlValue)

for(i in 1 : numArticle)
{
  abook <- r[[i]]
  PMID <- xmlAttrs(abook)
  Article[i, 1] <- PMID
  Article[i, 2] <- journalID[i]
  Article[i, 3] <- language[i]
  Article[i, 4] <- articleTitle[i]
}

lastName <- xpathSApply(xmlDOM, "//LastName", xmlValue)
foreName <- xpathSApply(xmlDOM, "//ForeName", xmlValue)
initials <- xpathSApply(xmlDOM, "//Initials", xmlValue)


for(i in 1 : length(lastName))
{
  Author[i,1] <- i
  Author[i,2] <- lastName[i] 
  Author[i,3] <- foreName[i]
  Author[i,4] <- initials[i]
}

Author<-Author %>% distinct(lastName, foreName, .keep_all = TRUE)

PMID <- xpathSApply(xmlDOM,"//PubmedArticle/@PMID")
k <- 1
for(i in 1 : length(PMID))
{
  xpathEx1 <- paste0("//PubmedArticle[@PMID='", as.numeric(PMID[i]), "' ]/Article/AuthorList/Author/LastName")
  xpathEx2 <- paste0("//PubmedArticle[@PMID='", as.numeric(PMID[i]), "' ]/Article/AuthorList/Author/ForeName")
  last_name <- xpathSApply(xmlDOM, xpathEx1, xmlValue)
  first_name <- xpathSApply(xmlDOM, xpathEx2, xmlValue)
  for(j in 1 : length(last_name))
  {
    AuthorList[k,1] <- PMID[i]
    sqlCmd<-paste0("SELECT AID FROM Author 
                   WHERE lastName=","\"",last_name[j],"\" ",
                   "AND"," foreName=","\"",first_name[j],"\"")
    A_ID<-sqldf(sqlCmd)
    AuthorList[k,2] <- A_ID
    k <- k + 1
  } 
}

dbWriteTable(dbcon, "Authors", Author, overwrite = T)
dbWriteTable(dbcon, "Articles", Article, overwrite = T)
dbWriteTable(dbcon, "Journals", Journal, overwrite = T)
dbWriteTable(dbcon, "AuthorLists", AuthorList, overwrite = T)

sqlcmd <- "SELECT * FROM Authors LIMIT 6"
results <- dbGetQuery(dbcon, sqlcmd)
print(results)

dbDisconnect(dbcon)

